const htmlmin = require('html-minifier-terser');
//const postcss = require('postcss');
//const csso = require('postcss-csso');
//const minmax = require('postcss-media-minmax');
//const autoprefixer = require('autoprefixer');
//const pimport = require('postcss-import');
//const esbuild = require('esbuild');
const highlight = require('@11ty/eleventy-plugin-syntaxhighlight');
const fs = require('fs');
const Image = require("@11ty/eleventy-img");
//const prettydata = require('pretty-data');
//const rss = require('@11ty/eleventy-plugin-rss');



// Шорткод для создания <img> в HTML:
// Как использовать: {% image "class1 class2", "./src/img/cat.jpg", "Аlt name", "(min-width: 30em) 50vw, 100vw" %}
async function imageShortcode(src, alt, sizes, cls) {
	let metadata = await Image(src, {
		formats: [null],// в каких форматах создать картинки ["avif", "webp", null].
		extBlackList: ["svg"],
		widths: [null],// в каких разрешениях создать картинки [460, 1200, null].
		//filenameFormat: (id, src, width, format) => {
		//	const extension = path.extname(src);
		//	const name = path.basename(src, extension);
		//	return `${name}-${width}.${format}`;
		//},
		sharpOptions: {
			animated: true,
		},
		sharpJpegOptions: {
			quality: 80,// качество "1-100", default "80".
		},
		sharpPngOptions: {
			colors: 256,// количество цветов, default "256".
			quality: 100,// использовать минимум цветов для заданного качества (0-100?), default "100".
			compressionLevel: 6,// сжатие "0"(fastest, largest) to "9"(slowest, smallest), default "6".
			effort: 7,// ресурсы процессора, "0-9", default "7".
		},
		sharpWebpOptions: {
			quality: 80,// качество "1-100", default "80".
			//lossless: true, сжатие без потерь, default "false".
			effort: 4,// ресурсы процессора, "0-6", default "4".
		},
		sharpAvifOptions: {
			quality: 50,// качество "1-100", default "50".
			//lossless: true, сжатие без потерь, default "false".
			effort: 4,// ресурсы процессора, "0-9", default "4".
		},
		urlPath: "/img/",// путь который будет в теге <img>.
		outputDir: "./site/img/",// путь записи картинок на выходе.
	});
	let imageAttributes = {
		alt,
		sizes,
		class: cls,
		//loading: "lazy",
		//decoding: "async",
	};
	return Image.generateHTML(metadata, imageAttributes, {
		whitespaceMode: "inline"
	});
}




module.exports = (config) => {

	// Фильтры для переменных Eleventy:

	// Фильтр для даты:
	// Использование: "{{ page.date | dateISO }}", результат: "2022-01-28"
	config.addFilter('dateISO', (value) => {
		return value.toISOString().split('T')[0];
	});

	// Фильтр для удобочитаемой русской даты:
	// Использование: "{{ page.date | dateRus }}", результат: "???":
	config.addFilter("dateRus", (date) => {
		const options = { day: "numeric", month: "short", year: "numeric" };
		return date.toLocaleDateString("ru-RU", options);
	});




	// Обработка HTML:
	config.addTransform('html-minify', (content, path) => {
		if (path && path.endsWith('.html')) {
			return htmlmin.minify(
				content, {
				collapseBooleanAttributes: true,
				//collapseInlineTagWhitespace: true,
				collapseWhitespace: true,
				decodeEntities: true,
				includeAutoGeneratedTags: false,
				minifyCSS: true,
				minifyJS: true,
				removeComments: true,
				removeRedundantAttributes: true,
				removeScriptTypeAttributes: true,
				removeStyleLinkTypeAttributes: true,
				sortAttributes: true,
				sortClassName: true,
				}
			);
		}
		return content;
	});




	// Обработка CSS:
	//const styles = [
	//	'./src/styles.css',
	//	//'./src/styles/light.css',
	//	//'./src/styles/dark.css',
	//];

	//config.addTemplateFormats('css');

	//config.addExtension('css', {
	//	outputFileExtension: 'css',
	//	compile: async (content, path) => {
	//		if (!styles.includes(path)) {
	//			return;
	//		}
	//		return async () => {
	//			let output = await postcss([
	//				pimport,
	//				minmax,
	//				autoprefixer,
	//				csso,
	//			]).process(content, {
	//				from: path,
	//			});
	//			return output.css;
	//		}
	//	}
	//});
	//config.addNunjucksAsyncFilter('css', (path, callback) => {
	//	fs.readFile(path, 'utf8', (error, content) => {
	//		postcss([
	//			pimport,
	//			minmax,
	//			autoprefixer,
	//			csso,
	//		]).process(content, {
	//			from: path,
	//		}).then((output) => {
	//			callback(null, output.css)
	//		});
	//	});
	//});




	// Обработка JS:
	//config.addTemplateFormats('js');

	//config.addExtension('js', {
	//	outputFileExtension: 'js',
	//	compile: async (content, path) => {
	//		if (path !== './src/scripts.js') {
	//			return;
	//		}
	//		return async () => {
	//			return esbuild.buildSync({
	//				entryPoints: [path],
	//				minify: true,
	//				bundle: true,
	//				write: false,
	//			}).outputFiles[0].text;
	//		}
	//	}
	//});




	// Обработка картинок:
	config.addNunjucksAsyncShortcode("image", imageShortcode);
	config.addLiquidShortcode("image", imageShortcode);
	config.addJavaScriptFunction("image", imageShortcode);




	// Плагины:
	config.addPlugin(highlight);




	// Прямое копирование файлов и папок:
	[
		'src/img',
		//'src/img/**/*.{svg,avif,webp,jxl,jpg,jpeg,png,tif,tiff,bmp,gif}',
		//'src/fls',
		'src/*.{txt,xml,json,webmanifest,htaccess}',
	].forEach(
		path => config.addPassthroughCopy(path)
	);




	// Конфигурация путей и папок:
	return {
		//pathPrefix: "/eleventy-blog/", это добавляет каталог в путь файлов
		addPassthroughFileCopy: true,
		dataTemplateEngine: "njk",
		markdownTemplateEngine: "njk",
		htmlTemplateEngine: "njk",
		templateFormats: ["html", "njk", "md"],
		dir: {
			input: "src",
			output: "site",
			includes: "_includes",
			layouts: "_includes",
			data: "_data"
		}
	};
};
